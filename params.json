{"name":"Visualizing Benchmarks","tagline":"See speedups over a baseline.","body":"#Visualizing Benchmarks\r\n\r\nThis is a visualization of benchmark data, i.e. improvements over a baseline.\r\nIt is easy to embed in larger webpages using any data of the correct format.\r\n\r\nFor a full description of the motivation and design, read the\r\n**[essay](http://www.eecs.tufts.edu/~mgolds07/icfp_viz/)**.\r\n\r\n##Features\r\n* Logairthmic scale, which is the only way to visualize multiplicative data without distortion\r\n* Axis adapts to range of data automatically\r\n* Interactively click a bar to rescale all data with that series as baseline\r\n* Automatically optimizes when exactly two series are present\r\n* Easily embedable: can specify DOM element and dimensions\r\n* Free and open source, built with d3.js\r\n\r\n##Documentation\r\n\r\n###Terminology\r\nThis visualization is meant primarily for comparing performance on various tasks against a baseline. With that in mind,\r\n\r\n* A **series** is a category of something being tested. This can be a programming language, computer architecture, or athlete. Visually these are colors.\r\n* A **benchmark** is task on which each series is tested, resulting in a numeric **performance**. This can be software test batteries or the name of a atheletic event. Visually these are groups of columns.\r\n* The **baseline** is the currently selected series. The performance of the other series are scaled relative to the baseline's performance in that benchmark. Visually the baseline is implicit, except that it is noted on the *y*-axis label.\r\n\r\nAgain: performance is scaled relative to another series's performance on the\r\nsame benchmark, not the same series's performance on another benchmark. This is\r\nbecause benchmarks are expected to not be comparable tasks. Benchmarks are\r\ncategorical; they have no order or relationship. (If you have one task\r\nparamterized over a number, use a line plot.)\r\n\r\n###Inclusion\r\nInclude the following lines in the document head.\r\n\r\n````html\r\n<script src=\"http://d3js.org/d3.v3.min.js\" charset=\"utf-8\"></script>\r\n<link href=\"benchmarks.css\" rel=\"stylesheet\" type=\"text/css\"></link>\r\n<script src=\"benchmarks.js\" type=\"text/javascript\"></script>\r\n````\r\n\r\nThere is only one exposed function, `benchmarks(datafile, selector, width, height)`.\r\n* **datafile** is a string path to a json file in the format described below.\r\n* **selector** is an optional string D3-style selector to indicate a DOM element to be the parent of the visualizations's svg. This may be `element_name`, `.class`, or the expected use case when embedding, `#element_id`. The default is `body`.\r\n* **width** and **height** are optional numbers to set the total dimensions of the svg element. The default is 900x500.\r\n\r\n###JSON File Format\r\n\r\nData is expected as a JSON file with an object at the top level with the following keys. Examples are given in the repo.\r\n\r\n* The key **series** has a value of an array of strings (names of series).\r\n* The **benchmarks** key also indicates an array. Each element is an array of two elements: a string (benchmark name), and an array of numbers (performances). Each array of performances must have the same length as the array of series.\r\n* The optional key **y_label** is a string to display on the *y*-axis as \"`y_label` Relative to `baseline`\". If not supplied, defaults to \"Execution Time\".\r\n\r\nThe script `format_csv.rb` is provided to convert csv files into this json\r\nformat. Provide the input file as an argument and the result is printed on\r\nstandard out. The script expects the fields to be\r\n`benchmark,series,performance`, grouped by benchmark, and series always in the\r\nsame order for each benchmark. If your csv is not in this format, try something\r\nsimilar to\r\n\r\n````\r\nsed 's/\\(.*\\),\\(.*\\),\\(.*\\)/\\2,\\1,\\3/' <you_data.csv | sort >your_data_formated.csv\r\n````\r\n\r\nThis switches the first two fields and then sorts them.\r\n\r\n###Known Issues\r\n* There are only 10 hard-coded colors (which correspond to series).\r\n* There is no support for benchmarks known for only some of the series. But conceptually, when a series with incomplete data is chosen to be the baseline, how should the benchmarks without data be scaled?\r\n* The font sizes are hard-coded and do not account for the window size (change this in the CSS if you need to).\r\n* The data is expected to come from a file, rather than passing in a JS object directly. If you actually have a use case for this functionality, open an issue and it may be added.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}